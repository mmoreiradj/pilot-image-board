// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement()) @map("user_id")
  createdAt DateTime @default(now()) @map("user_created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("user_updated_at")

  username String @unique @map("user_username")
  hash     String @map("user_hash")

  description String? @map("user_description")

  posts   Post[]
  threads Thread[]
  roles   User_role[]

  @@map("user")
}

model User_role {
  userId Int @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  roleId Int @map("role_id")
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([userId, roleId], name: "user_roles_user_id_role_id_index")
  @@map("user_role")
}

model Board {
  id        Int      @id @default(autoincrement()) @map("board_id")
  createdAt DateTime @default(now()) @map("board_created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("board_updated_at")

  title       String  @unique @map("board_title")
  description String? @map("board_description")

  categoryId Int  @map("categoryId")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  threads Thread[]

  @@map("board")
}

model Category {
  id        Int      @id @default(autoincrement()) @map("category_id")
  createdAt DateTime @default(now()) @map("category_created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("category_updated_at")

  name        String  @unique @map("category_name")
  description String @map("category_description")
  boards      Board[]

  @@map("category")
}

model Thread {
  id        Int      @id @default(autoincrement()) @map("thread_id")
  createdAt DateTime @default(now()) @map("thread_created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("thread_updated_at")

  title       String @map("thread_title")
  description String @map("thread_description")
  image       String @default("") @map("thread_image")

  boardId Int @map("board_id")
  board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  creatorId Int @map("creator_id")
  user      User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  posts     Post[]

  @@map("thread")
}

model Post {
  id        Int      @id @default(autoincrement()) @map("post_id")
  createdAt DateTime @default(now()) @map("post_created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("post_updated_at")

  description String @map("post_description")
  image       String @default("") @map("post_image")

  creatorId Int @map("creator_id")
  user      User @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  threadId Int @map("thread_id")
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  answers post_answer[] @relation("source")
  answersTo post_answer[] @relation("target")

  @@map("post")
}

model post_answer {
  sourcePostId Int @map("post_id_source")
  sourcePost Post @relation("source", fields: [sourcePostId], references: [id], onDelete: Cascade)

  targetPostId Int @map("post_id_target")
  targetPost Post @relation("target", fields: [targetPostId], references: [id], onDelete: Cascade)

  @@id([sourcePostId, targetPostId])
  @@map("post_answer")
}

model Role {
  id Int @id @default(autoincrement()) @map("role_id")

  name  String      @unique @map("role_name")
  users User_role[]

  @@map("role")
}
